# 包含定义文件
I definitions.inc

# 初始化仓库
> init
<<<

# 创建并提交第一个文件
+ file1.txt wug.txt
> add file1.txt
<<<
> commit "initial file"
<<<

# 创建分支
> branch feature
<<<

# 继续在主分支上工作
+ file2.txt notwug.txt
> add file2.txt
<<<
> commit "master work 1"
<<<

# 切换到feature分支
> checkout feature
<<<

# 在feature分支上工作
+ file3.txt wug.txt
> add file3.txt
<<<
> commit "feature work 1"
<<<

# 修改file1.txt
+ file1.txt notwug.txt
> add file1.txt
<<<
> commit "feature work 2"
<<<

# 切换回master分支
> checkout master
<<<

# 也修改file1.txt，但内容不同
+ file1.txt wug.txt
> add file1.txt
<<<
> commit "master work 2"
<<<

# 检查日志
> log
===
${COMMIT_HEAD}
master work 2

===
${COMMIT_HEAD}
master work 1

===
${COMMIT_HEAD}
initial file

===
${COMMIT_HEAD}
initial commit

<<<*

# 合并feature分支(应该产生冲突)
> merge feature
Encountered a merge conflict.
<<<

# 检查冲突文件
# 要验证冲突文件内容，我们需要检查file1.txt是否包含冲突标记
# 由于我们无法准确知道文件内容，我们只能检查文件存在

# 提交解决冲突
+ file1.txt wug.txt
> add file1.txt
<<<
> commit "resolve conflict"
<<<

# 最终检查状态
> status
=== Branches ===
*master
feature

=== Staged Files ===

=== Removed Files ===

=== Modifications Not Staged For Commit ===

=== Untracked Files ===

<<<

# 检查所有文件都存在
E file1.txt
E file2.txt
E file3.txt

# 测试reset命令回到初始提交
> log
===
${COMMIT_HEAD}
resolve conflict

===
${COMMIT_HEAD}
Merged feature into master.

===
${COMMIT_HEAD}
master work 2

===
${COMMIT_HEAD}
master work 1

===
${COMMIT_HEAD}
initial file

===
${COMMIT_HEAD}
initial commit

<<<*

# 保存初始提交ID
D INITIAL_FILE_ID "${4}"

# 重置到初始提交
> reset ${INITIAL_FILE_ID}
<<<

# 检查状态
> status
=== Branches ===
*master
feature

=== Staged Files ===

=== Removed Files ===

=== Modifications Not Staged For Commit ===

=== Untracked Files ===

<<<

# 确认只有file1.txt存在
E file1.txt
* file2.txt
* file3.txt